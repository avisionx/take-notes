{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","user","setUser","provider","firebase","auth","GoogleAuthProvider","useEffect","onAuthStateChanged","Container","Button","onClick","signOut","then","FormGroup","inline","Input","placeholder","setPersistence","Auth","Persistence","LOCAL","signInWithPopup","result","catch","error","errorCode","code","errorMessage","message","email","credential","console","log","Boolean","window","location","hostname","match","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oRAgEeA,MA3Df,WAAgB,IAAD,EAEWC,mBAAS,MAFpB,mBAENC,EAFM,KAEAC,EAFA,KAGPC,EAAW,IAAIC,IAASC,KAAKC,mBAkCnC,OAhCAC,qBAAU,WACRH,IAASC,OAAOG,oBAAmB,SAASP,GAEzCC,EADGD,GAGK,WAGV,IAwBCA,EAQA,kBAACQ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,QA/BE,WACdP,IAASC,OAAOO,UAAUC,MAAK,WAC7BX,EAAQ,WA6BN,YACA,wCACA,wCACA,wCACA,wCACA,kBAACY,EAAA,EAAD,CAAWC,QAAM,GACf,kBAACC,EAAA,EAAD,CAAOC,YAAY,aACnB,kBAACP,EAAA,EAAD,eAdJ,oCACE,kBAACA,EAAA,EAAD,CAAQC,QAnBC,WACbP,IAASC,OAAOa,eAAed,IAASC,KAAKc,KAAKC,YAAYC,OAC7DR,MAAK,WACJ,OAAOT,IAASC,OAAOiB,gBAAgBnB,GAAUU,MAAK,SAASU,GAC7D,IAAItB,EAAOsB,EAAOtB,KAClBC,EAAQD,MACPuB,OAAM,SAASC,GAChB,IAAIC,EAAYD,EAAME,KAClBC,EAAeH,EAAMI,QACrBC,EAAQL,EAAMK,MACdC,EAAaN,EAAMM,WACvBC,QAAQC,IAAIP,EAAWE,EAAcE,EAAOC,WAQ5C,aCjCYG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCANlC,IAASmC,cAXY,CACnBC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIjB3C,IAAS4C,YAETC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdlC,OAAM,SAAAC,GACLO,QAAQP,MAAMA,EAAMI,c","file":"static/js/main.802be6ac.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button, Container, FormGroup, Input } from 'reactstrap';\n\nimport firebase from 'firebase'\n\nfunction App() {\n\n  const [user, setUser] = useState(null)\n  const provider = new firebase.auth.GoogleAuthProvider();\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged(function(user) {\n      if (user) {\n       setUser(user)\n      } else {\n       setUser(null)\n      }\n    });\n  }, [])\n\n  const signOut = () => {\n    firebase.auth().signOut().then(() => {\n      setUser(null);\n    })\n  }\n\n  const signIn = () => {\n    firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)\n    .then(() => {\n      return firebase.auth().signInWithPopup(provider).then(function(result) {\n        var user = result.user;\n        setUser(user);\n      }).catch(function(error) {\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        var email = error.email;\n        var credential = error.credential;\n        console.log(errorCode, errorMessage, email, credential);\n      })\n    });\n  }\n  \n  if(!user)\n    return(\n      <>\n        <Button onClick={signIn}>Sign In</Button>\n      </>\n    )\n  else\n    return (\n      <Container>\n        <Button onClick={signOut}>Sign Out</Button>\n        <p>Message 1</p>\n        <p>Message 1</p>\n        <p>Message 1</p>\n        <p>Message 1</p>\n        <FormGroup inline>\n          <Input placeholder=\"task add\" />\n          <Button>Send</Button>\n        </FormGroup>\n      </Container>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './custom.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport firebase from 'firebase'\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBlZqp2tCool5SFafHAizHodgYT72H3kn0\",\n  authDomain: \"take-notes-cf817.firebaseapp.com\",\n  databaseURL: \"https://take-notes-cf817.firebaseio.com\",\n  projectId: \"take-notes-cf817\",\n  storageBucket: \"take-notes-cf817.appspot.com\",\n  messagingSenderId: \"709425181459\",\n  appId: \"1:709425181459:web:f12bd0ba3b03d18ec120e6\",\n  measurementId: \"G-QB53ELK34Q\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}