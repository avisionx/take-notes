{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","user","setUser","tasks","setUserTasks","newTask","setNewTask","provider","firebase","auth","GoogleAuthProvider","fetchUserTasks","curUser","database","ref","uid","once","then","snapshot","val","useEffect","onAuthStateChanged","Container","Button","onClick","signOut","map","data","i","key","Input","placeholder","onChange","event","target","value","newUserTasks","set","catch","error","console","log","setPersistence","Auth","Persistence","LOCAL","signInWithPopup","result","errorCode","code","errorMessage","message","email","credential","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.427c9465.chunk.js","sourcesContent":["import React, {\n  useEffect,\n  useState\n} from 'react';\nimport {\n  Button,\n  Container,\n  Input\n} from 'reactstrap';\n\nimport firebase from 'firebase'\n\nfunction App() {\n\n  const [user, setUser] = useState(null)\n  const [tasks, setUserTasks] = useState([])\n  const [newTask, setNewTask] = useState('')\n  const provider = new firebase.auth.GoogleAuthProvider();\n\n  const fetchUserTasks = (curUser) => {\n    firebase.database().ref(curUser.uid).once('value').then((snapshot) => {\n      if (snapshot.val())\n        setUserTasks(snapshot.val())\n      else\n        setUserTasks([])\n    })\n  }\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged(function (user) {\n      if (user) {\n        setUser(user)\n        fetchUserTasks(user);\n      } else {\n        setUser(null)\n      }\n    });\n  }, [])\n\n  const signOut = () => {\n    firebase.auth().signOut().then(() => {\n      setUser(null);\n      setUserTasks([]);\n      setNewTask('');\n    })\n  }\n\n  const signIn = () => {\n    firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)\n      .then(() => {\n        return firebase.auth().signInWithPopup(provider).then(function (result) {\n          var user = result.user;\n          setUser(user);\n          fetchUserTasks(user);\n          setNewTask('');\n        }).catch(function (error) {\n          var errorCode = error.code;\n          var errorMessage = error.message;\n          var email = error.email;\n          var credential = error.credential;\n          console.log(errorCode, errorMessage, email, credential);\n        })\n      });\n  }\n\n  const inputHandler = (event) => {\n    setNewTask(event.target.value)\n  }\n\n  const addTask = () => {\n    var newUserTasks = [...tasks, newTask]\n    firebase.database().ref(user.uid).set(newUserTasks).then(() => {\n      setUserTasks(newUserTasks)\n      setNewTask('')\n    }).catch((error) => {\n      console.log(error)\n    });\n  }\n\n  if (!user)\n    return ( \n      <Button onClick = {signIn}> Sign In </Button>\n    )\n  else\n    return ( \n    <Container>\n      <Button onClick = {signOut} > Sign Out </Button> \n      {\n        tasks.map((data, i) => ( \n        <p key = {i}> {data} </p>\n        )\n      )} \n      <Input placeholder = \"task add\"\n      onChange = {inputHandler}\n      value={newTask} /> \n      <Button onClick = {addTask} > Send </Button>\n      </Container>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './custom.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport firebase from 'firebase'\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBlZqp2tCool5SFafHAizHodgYT72H3kn0\",\n  authDomain: \"take-notes-cf817.firebaseapp.com\",\n  databaseURL: \"https://take-notes-cf817.firebaseio.com\",\n  projectId: \"take-notes-cf817\",\n  storageBucket: \"take-notes-cf817.appspot.com\",\n  messagingSenderId: \"709425181459\",\n  appId: \"1:709425181459:web:f12bd0ba3b03d18ec120e6\",\n  measurementId: \"G-QB53ELK34Q\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}